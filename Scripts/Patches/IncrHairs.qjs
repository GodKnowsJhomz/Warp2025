/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2023 Ai4rei/AN                                      *
*   Copyright (C) 2013-2023 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Ai4rei/AN, Neo-Mind                                    *
*   Created Date  : 2021-02-24                                             *
*   Last Modified : 2024-08-21                                             *
*                                                                          *
\**************************************************************************/

////
/// \brief Increases hairstyle limit by patching CMP/Push and fixes mid-headgear fallback.
///

IncrHairs = function(patchName) {
    if (Exe.BuildDate < 20241100)
        throw Error("Only 2024+ clients supported by this patch.");

    let maxHairs;
    if (patchName === "Allow65kHairs") {
        maxHairs = 65535;
    } else if (patchName === "IncrHairStyles") {
        maxHairs = Exe.GetUserInput(
            '$maxHairs', D_Uint16,
            "Hairstyle Limit",
            "Enter maximum hairstyle count (1â€“65535):",
            100, { saveDefault: true }
        );
        if (maxHairs === false) Cancel("Limit reverted to default");
        maxHairs = Math.max(1, Math.min(65535, maxHairs|0));
    } else {
        maxHairs = CACHE.get('IH_Max') ?? 65535;
    }
    CACHE.put('IH_Max', maxHairs);

    const IH_PUSH_PAT_V1 =
        "68 ?? ?? 00 00 E8 ?? ?? ?? ?? 8B 83 ?? ?? ?? ?? BF 01 00 00 00 C7 00 ?? ?? ?? ??";
    const IH_PUSH_PAT_V2 =
        "50 6A ?? E8 ?? ?? ?? ?? 8B 83 ?? ?? ?? ?? BF 01 00 00 00 C7 00 ?? ?? ?? ?? 90";

    let pushAddr = Exe.FindHex(IH_PUSH_PAT_V1);
    let pushOpAddr = -1; // address of the actual PUSH opcode (68 or 6A)
    if (pushAddr >= 0) {
        pushOpAddr = pushAddr;                 // '68' starts at match
    } else {
        pushAddr = Exe.FindHex(IH_PUSH_PAT_V2);
        if (pushAddr < 0)
            throw Error("Could not find PUSH pattern near hair initialization.");
        pushOpAddr = pushAddr + 1;             // skip '50', point to '6A'
    }

    const IH_CMP_PAT =
        "81 FF ?? 0B 00 00 7C ?? 8D 45 E8 C7 45 E8 ?? ?? ?? ?? 50 8D B3 7C 0F 00 00 68 ?? ?? 00 00";
    const cmpAddr = Exe.FindHex(IH_CMP_PAT);
    if (cmpAddr < 0)
        throw Error("Could not find CMP pattern (edi comparison).");

    const opPush = Exe.GetUint8(pushOpAddr);
    if (opPush !== 0x68 && opPush !== 0x6A)
        throw Error("Unexpected opcode at PUSH (expected 0x68 or 0x6A).");

    if (!(Exe.GetUint8(cmpAddr) === 0x81 && Exe.GetUint8(cmpAddr + 1) === 0xFF))
        throw Error("Unexpected opcode at CMP (expected 0x81 0xFF).");

    if (opPush === 0x68) {
        // push imm32
        Exe.SetInt32(pushOpAddr + 1, maxHairs & 0xFFFF);
    } else {
        // push imm8
        Exe.SetUint8(pushOpAddr + 1, maxHairs & 0xFF);
    }

    // cmp edi, imm32
    Exe.SetInt32(cmpAddr + 2, maxHairs & 0xFFFF);

    return true;
};

// Aliases so GUI shows two separate patch entries
Allow65kHairs  = IncrHairs; // auto 65535, no input
IncrHairStyles = IncrHairs; // manual input
